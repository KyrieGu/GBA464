# Hint: how do you deal with year-months with no trip? These periods are not in the original data,
#   but you might need to have these periods when you calculate RFM, right?
# Consider expanding the time frame using expand.grid() but you do not have to.
#construct table of year-months
df_new <- expand.grid(id = seq(1,1000,1), year = 1997, month = seq(01,12,1))
df_new <- merge(df_new, expand.grid(id = seq(1,1000,1), year = 1998, month = seq(1,6,1)),
by = c("id","year","month"), all = TRUE)
#format month in df
df$month <- as.integer(df$month)
#merge it with our data frame
df <- merge(df,df_new, by = c("id","year","month"), all = TRUE)
#sort again
df <- df[with(df,order(id,year,month)),]
#replace all NA with 0
df[is.na(df)] <- 0
#result
head(df)
View(year_level)
View(year_level)
#construct df$recency
df$recency <- 0
df[df$id =1]
df$month[df$id == 1 & df$trips != 0]
a <- df$month[df$id == 1 & df$trips != 0]
b <- which(a == 8)
b
c <- months[which(a == 8) - 1]
c <- months[which(a == 8)]
b <- which(a == 8)
bc <- months[which(a == 8)]
b
c <- a[which(a == 8)]
c
c <- a[which(a == 8)-1]
c
#loop through every individual
for (id in df$id) {
#loop through the months
months <- df$month[df$id == id & df$trips != 0]
for (m in months) {
#fist month should be NA
if (m == 1){
df[df$id == id & df$month == 1, "recency"] <- NA
next
}
#extract previous month
previous <- months[which(months == m) - 1]
df[df$id == id & df$month == 1, "recency"] <- previous
}
}
#construct df$recency
df$recency <- 0
#construct df$recency
df$recency <- 0
#loop through every individual
for (id in df$id) {
#loop through year
for (y in c(1997,1998)){
#loop through the months
months <- df$month[df$id == id & df$year == y & df$trips != 0]
for (m in months) {
#fist month should be NA
if (m == 1){
df[df$id == id & df$month == 1, "recency"] <- NA
next
}
#extract previous month
previous <- months[which(months == m) - 1]
df[df$id == id & df$month == 1, "recency"] <- previous
}
}
}
# # ===================================================
# GBA464: RFM analysis on CDNOW data
# Author: Yufeng Huang
# Student: Tianrun Gu
# Description: Lab on functions and loops
# Data: CDNOW customer data (this time full data)
# Source: provided by Professor Bruce Hardie on
#   http://www.brucehardie.com/datasets/CDNOW_sample.zip
# ===================================================
# ====== CLEAR EVERYTHING ======
rm(list = ls())
# ====== READ TRIAL DATA =======
url <- 'https://dl.dropboxusercontent.com/s/xxfloksp0968mgu/CDNOW_sample.txt'
if (!file.exists('CDNOW_sample.txt')) {     # check whether data exists in local folder (prevents downloading every time)
download.file(url, 'CDNOW_sample.txt')
}
df.raw <- read.fwf('CDNOW_sample.txt', width = c(6, 5, 9, 3, 8), stringsAsFactors = F)  # load data
# ====== Section 2: loading the data ======
df.raw[[1]] <- NULL # drop old id
names(df.raw) <- c("id", "date", "qty", "expd")
# a) generate year and month
#clean up the data
df.raw <- na.omit(df.raw)
#convert date to string
df.raw$date <- as.character(df.raw$date)
#get the year
df.raw$year <- substring(df.raw$date, 1,4)
#get the month
df.raw$month <- substring(df.raw$date,5,6)
#preview the data
head(df.raw)
# b) aggregate into monthly data with number of trips and total expenditure
year_level <- aggregate(cbind(qty, expd) ~ id + year + month, data = df.raw, FUN = sum)
#construct unique function
length.unique <- function(x) length(unique(x))
#calculate the counts
frequency <- aggregate(expd ~ id + year + month, data = df.raw, FUN = length)
#rename to "trips"
colnames(frequency)[4] <- "trips"
#combine to a new data frame
df <- merge(year_level,frequency, by = c("id","year","month"), all = TRUE)
#sort
df <- df[with(df,order(id)),]
#result
head(df)
# c) generate a table of year-months, merge, replace no trip to zero.
# Hint: how do you deal with year-months with no trip? These periods are not in the original data,
#   but you might need to have these periods when you calculate RFM, right?
# Consider expanding the time frame using expand.grid() but you do not have to.
#construct table of year-months
df_new <- expand.grid(id = seq(1,1000,1), year = 1997, month = seq(01,12,1))
df_new <- merge(df_new, expand.grid(id = seq(1,1000,1), year = 1998, month = seq(1,6,1)),
by = c("id","year","month"), all = TRUE)
#format month in df
df$month <- as.integer(df$month)
#merge it with our data frame
df <- merge(df,df_new, by = c("id","year","month"), all = TRUE)
#sort again
df <- df[with(df,order(id,year,month)),]
#replace all NA with 0
df[is.na(df)] <- 0
#result
head(df)
# now we should have the dataset we need; double check to make sure that every consumer is in every period
# ====== Section 3.1: recency ======
# use repetition statement, such as a "for-loop", to generate a recency measure for each consumer
#   in each period. Hint: if you get stuck here, take a look at Example 3 when we talked about "for-loops"
#   call it df$recency
#construct df$recency
df$recency <- 0
#loop through every individual
for (id in df$id) {
#loop through year
for (y in c(1997,1998)){
#loop through the months
months <- df$month[df$id == id & df$year == y & df$trips != 0]
for (m in months) {
#fist month should be NA
if (m == 1){
df[df$id == id & df$month == 1, "recency"] <- NA
next
}
#extract previous month
previous <- months[which(months == m) - 1]
df[df$id == id & df$month == 1, "recency"] <- previous
}
}
}
months <- df$month[df$id == 1 & df$year == 1997 & df$trips != 0]
months
months <- df$month[df$id == 1 & df$year == 1998 & df$trips != 0]
months
#construct df$recency
df$recency <- 0
#loop through every individual
for (id in df$id) {
#loop through year
for (y in c(1997,1998)){
#loop through the months
months <- df$month[df$id == id & df$year == y & df$trips != 0]
if(length(months) > 0){
for (m in months) {
#fist month should be NA
if (m == 1){
df[df$id == id & df$month == 1, "recency"] <- NA
next
}
#extract previous month
previous <- months[which(months == m) - 1]
df[df$id == id & df$month == 1, "recency"] <- previous
}
}
}
}
#construct df$recency
df$recency <- 0
#loop through every individual
for (id in df$id) {
#loop through year
for (y in c(1997,1998)){
#loop through the months
months <- df$month[df$id == id & df$year == y & df$trips != 0]
if(length(months) > 0){
for (m in months) {
#fist month should be NA
if (m == 1){
df[df$id == id & df$month == 1, "recency"] <- NA
}
else{
#extract previous month
previous <- months[which(months == m) - 1]
df[df$id == id & df$month == 1, "recency"] <- previous
}
}
}
}
}
months <- df$month[df$id == 1 & df$year == 1997 & df$trips != 0]
#construct df$recency
df$recency <- 0
#loop through every individual
for (id in df$id) {
#loop through year
for (y in c(1997,1998)){
#loop through the months
months <- df$month[df$id == id & df$year == y & df$trips != 0]
print(months)
if(length(months) > 0){
for (m in months) {
#fist month should be NA
if (match(m,months) == 1){
df[df$id == id & df$year == y & df$month == m, "recency"] <- NA
}
else{
#extract previous month
previous <- months[which(months == m) - 1]
df[df$id == id & df$month == 1, "recency"] <- previous
}
}
}
}
}
#construct df$recency
df$recency <- 0
#loop through every individual
for (id in df$id) {
#loop through year
for (y in c(1997,1998)){
#loop through the months
months <- df$month[df$id == id & df$year == y & df$trips != 0]
if(length(months) > 0){
print(months)
for (m in months) {
#fist month should be NA
if (match(m,months) == 1){
df[df$id == id & df$year == y & df$month == m, "recency"] <- NA
}
else{
#extract previous month
previous <- months[which(months == m) - 1]
df[df$id == id & df$month == 1, "recency"] <- previous
}
}
}
}
}
#construct df$recency
df$recency <- 0
#loop through every individual
for (id in df$id) {
#loop through year
for (y in c(1997,1998)){
#loop through the months
months <- df$month[df$id == id & df$year == y & df$trips != 0]
if(length(months) > 0){
for (m in months) {
#fist month should be NA
if (match(m,months) == 1){
df[df$id == id & df$year == y & df$month == m, "recency"] <- NA
}
else{
#extract previous month
previous <- months[which(months == m) - 1]
df[df$id == id & df$month == 1, "recency"] <- previous
}
}
}
}
}
View(df)
#construct df$recency
df$recency <- NA
#loop through every individual
for (id in df$id) {
#loop through year
for (y in c(1997,1998)){
#loop through the months
months <- df$month[df$id == id & df$year == y & df$trips != 0]
#first month go to the store
first <- months[1]
#how many months this person goes
l <- length(months)
#if he/she goes this year
if(l > 0){
#loop through every month
for (m in 12) {
#start to record recency
if(m > first){
#check which months is between
for(index in l-1){
if(m>months[index] && m < months[index+1]){
df$recency[df$id == id & df$year == y & df$month == m] <- months[index]
}
#the last period
else if(index > months[index+1]){
df$recency[df$id == id & df$year == y & df$month == m] <- months[index+1]
}
}
}
}
}
}
}
a <- df$month[df$id == 1 & df$year == 1997 & df$trips != 0]
test <- df$month[df$id == id & df$year == y & df$trips != 0]
test
test <- df$month[df$id == id & df$year == 1997 & df$trips != 0]
test
test <- df$month[df$id == 1 & df$year == 1997 & df$trips != 0]
test
#construct df$recency
df$recency <- NA
# # ===================================================
# GBA464: RFM analysis on CDNOW data
# Author: Yufeng Huang
# Student: Tianrun Gu
# Description: Lab on functions and loops
# Data: CDNOW customer data (this time full data)
# Source: provided by Professor Bruce Hardie on
#   http://www.brucehardie.com/datasets/CDNOW_sample.zip
# ===================================================
# ====== CLEAR EVERYTHING ======
rm(list = ls())
# ====== READ TRIAL DATA =======
url <- 'https://dl.dropboxusercontent.com/s/xxfloksp0968mgu/CDNOW_sample.txt'
if (!file.exists('CDNOW_sample.txt')) {     # check whether data exists in local folder (prevents downloading every time)
download.file(url, 'CDNOW_sample.txt')
}
df.raw <- read.fwf('CDNOW_sample.txt', width = c(6, 5, 9, 3, 8), stringsAsFactors = F)  # load data
# ====== Section 2: loading the data ======
df.raw[[1]] <- NULL # drop old id
names(df.raw) <- c("id", "date", "qty", "expd")
# a) generate year and month
#clean up the data
df.raw <- na.omit(df.raw)
#convert date to string
df.raw$date <- as.character(df.raw$date)
#get the year
df.raw$year <- substring(df.raw$date, 1,4)
#get the month
df.raw$month <- substring(df.raw$date,5,6)
#preview the data
head(df.raw)
# b) aggregate into monthly data with number of trips and total expenditure
year_level <- aggregate(cbind(qty, expd) ~ id + year + month, data = df.raw, FUN = sum)
#construct unique function
length.unique <- function(x) length(unique(x))
#calculate the counts
frequency <- aggregate(expd ~ id + year + month, data = df.raw, FUN = length)
#rename to "trips"
colnames(frequency)[4] <- "trips"
#combine to a new data frame
df <- merge(year_level,frequency, by = c("id","year","month"), all = TRUE)
#sort
df <- df[with(df,order(id)),]
#result
head(df)
# c) generate a table of year-months, merge, replace no trip to zero.
# Hint: how do you deal with year-months with no trip? These periods are not in the original data,
#   but you might need to have these periods when you calculate RFM, right?
# Consider expanding the time frame using expand.grid() but you do not have to.
#construct table of year-months
df_new <- expand.grid(id = seq(1,1000,1), year = 1997, month = seq(01,12,1))
df_new <- merge(df_new, expand.grid(id = seq(1,1000,1), year = 1998, month = seq(1,6,1)),
by = c("id","year","month"), all = TRUE)
#format month in df
df$month <- as.integer(df$month)
#merge it with our data frame
df <- merge(df,df_new, by = c("id","year","month"), all = TRUE)
#sort again
df <- df[with(df,order(id,year,month)),]
#replace all NA with 0
df[is.na(df)] <- 0
#result
head(df)
# now we should have the dataset we need; double check to make sure that every consumer is in every period
# ====== Section 3.1: recency ======
# use repetition statement, such as a "for-loop", to generate a recency measure for each consumer
#   in each period. Hint: if you get stuck here, take a look at Example 3 when we talked about "for-loops"
#   call it df$recency
#construct df$recency
df$recency <- NA
#loop through every id
for (id in df$id) {
#loop through year
for (y in c(1997,1998)){
#the months he/she went
months <- df$month[df$id == id & df$year == y & df$trips != 0]
#first month go to the store
first <- months[1]
#how many months this person goes
l <- length(months)
#if he/she goes this year
if(l > 0){
#loop through every month
for (m in 1:12) {
#start to record recency
if(m > first){
#check which months is between
for(index in 1:l-1){
if(m>months[index] && m < months[index+1]){
df$recency[df$id == id & df$year == y & df$month == m] <- months[index]
}
#the last period
else if(index > months[index+1]){
df$recency[df$id == id & df$year == y & df$month == m] <- months[index+1]
}
}
}
}
}
}
}
months <- df$month[df$id == 1 & df$year == 1997 & df$trips != 0]
#construct df$recency
df$recency <- NA
#loop through every id
for (id in df$id) {
#loop through year
for (y in c(1997,1998)){
#the months he/she went
months <- df$month[df$id == id & df$year == y & df$trips != 0]
#first month go to the store
first <- months[1]
#how many months this person goes
l <- length(months)
#if he/she goes this year
if(l > 0){
#loop through every month
for (m in 1:12) {
#start to record recency
if(m > first){
#check which months is between
for(index in 1:l-1){
if(m>months[index] && m < months[index+1]){
df$recency[df$id == id & df$year == y & df$month == m] <- months[index]
}
#the last period
else if(index >= months[index+1]){
df$recency[df$id == id & df$year == y & df$month == m] <- months[index+1]
}
}
}
}
}
}
}
#construct df$recency
df$recency <- NA
#loop through every id
for (id in df$id) {
#save the current previous month go to the store
current <- 0
#loop through years
for (y in c(1997,1998)){
#set up the current successful month
current = 0
#loop through the months
for (m in 1:12) {
if(df$trips[df$id == id & df$year == y & df$month == m > 0]){
#move the pointer
current = m
if(current == 0){
df$recency[df$id == id & df$year == y & df$month] <- NA
}
else{
df$recency[df$id == id & df$year == y & df$month] <- current
}
}
}
}
}
#construct df$recency
df$recency <- NA
#loop through every id
for (id in df$id) {
#save the current previous month go to the store
current <- 0
#loop through years
for (y in c(1997,1998)){
#set up the current successful month
current = 0
#loop through the months
for (m in 1:12) {
if(df$trips[df$id == id & df$year == y & df$month == m > 0]){
#move the pointer
current = m
if(current == 0){
df$recency[df$id == id & df$year == y & df$month] <- NA
}
else{
df$recency[df$id == id & df$year == y & df$month] <- current
}
}
else{
df$recency[df$id == id & df$year == y & df$month] <- m - current
}
}
}
}
